{"version":3,"sources":["components/Piece.js","components/Board.js","components/App.js","serviceWorker.js","index.js"],"names":["Piece","props","swapPieces","originPiece","destinationPiece","originIndex","puzzleState","left","pieces","findIndex","leftPiece","id","destinationIndex","bothRight","leftCopy","setter","right","rightPiece","console","log","rightCopy","leftIndex","rightIndex","className","draggable","onDragStart","ev","dataTransfer","setData","JSON","stringify","data","onDrop","pieceData","parse","getData","onDragOver","preventDefault","src","url","alt","Board","items","map","key","pretty","App","useState","puzzle","leftPuzzle","setLeftPuzzle","empty","rightPuzzle","setRightPuzzle","useEffect","wintitle","document","querySelector","win","pieceIds","piece","i","length","classList","remove","detectWin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d8cfc0b2.chunk.js","sourcesContent":["import React from 'react';\nimport '../stylesheets/piece.scss';\n\nconst Piece = (props) => {\n  const onDragStartHandler = (ev) => {\n    // ev.dataTransfer.effectAllowed = 'move';\n    ev.dataTransfer.setData('text/plain', JSON.stringify(props.data));\n  };\n\n  const onDragOverHandler = (ev) => {\n    ev.preventDefault();\n    return false;\n  };\n\n  const onDropHandler = (ev) => {\n    const pieceData = JSON.parse(ev.dataTransfer.getData('text/plain'));\n\n    swapPieces(pieceData, { ...props.data });\n  };\n\n  const swapPieces = (originPiece, destinationPiece) => {\n    let originIndex = props.puzzleState.left.pieces.findIndex((leftPiece) => leftPiece.id === originPiece.id);\n    let destinationIndex = props.puzzleState.left.pieces.findIndex((leftPiece) => leftPiece.id === destinationPiece.id);\n\n    const bothLeft = originIndex !== -1 && destinationIndex !== -1;\n    const bothRight = originIndex === -1 && destinationIndex === -1;\n    // este caso cambia piezas que solo se encuentran en el board izq\n    if (bothLeft) {\n      const leftCopy = [...props.puzzleState.left.pieces];\n      leftCopy[originIndex] = destinationPiece;\n      leftCopy[destinationIndex] = originPiece;\n      props.puzzleState.left.setter(leftCopy);\n      // este caso cambia piezas que solo se encuentran en el board dcho\n    } else if (bothRight) {\n      // hay que volver a buscar el Ã­ndice pero del tablero derecho\n      originIndex = props.puzzleState.right.pieces.findIndex((rightPiece) => rightPiece.id === originPiece.id);\n      destinationIndex = props.puzzleState.right.pieces.findIndex((rightPiece) => rightPiece.id === destinationPiece.id);\n      console.log('ss2we', originIndex, destinationIndex);\n\n      const rightCopy = [...props.puzzleState.right.pieces];\n      rightCopy[originIndex] = destinationPiece;\n      rightCopy[destinationIndex] = originPiece;\n      props.puzzleState.right.setter(rightCopy);\n      // este caso intercambia piezas entre el board izq y dcho\n    } else {\n      const leftIndex = props.puzzleState.left.pieces.findIndex((leftPiece) => leftPiece.id === originPiece.id);\n      const rightIndex = props.puzzleState.right.pieces.findIndex((rightPiece) => rightPiece.id === destinationPiece.id);\n\n      if (leftIndex === -1) {\n        swapPieces(destinationPiece, originPiece);\n        return;\n      }\n\n      const leftCopy = [...props.puzzleState.left.pieces];\n      leftCopy[leftIndex] = destinationPiece;\n\n      const rightCopy = [...props.puzzleState.right.pieces];\n      rightCopy[rightIndex] = originPiece;\n\n      props.puzzleState.left.setter(leftCopy);\n      props.puzzleState.right.setter(rightCopy);\n    }\n  };\n\n  return (\n    <li className='piece' draggable='true' onDragStart={onDragStartHandler} onDrop={onDropHandler} onDragOver={onDragOverHandler}>\n      <img className='piece__size' src={props.data.url} alt={`Pieza ${props.data.id}`} />\n    </li>\n  );\n};\n\nexport default Piece;\n","import React from 'react';\nimport '../stylesheets/board.scss';\nimport Piece from './Piece';\n\nconst Board = (props) => {\n  const items = props.pieces.map((data) => <Piece data={data} key={data.id} puzzleState={props.puzzleState} />);\n\n  return <ul className={props.pretty ? 'board pretty' : 'board'}>{items}</ul>;\n};\n\nexport default Board;\n","import React, { useEffect, useState } from \"react\";\nimport \"../stylesheets/App.scss\";\nimport puzzle from \"../services/puzzle.json\";\nimport empty from \"../services/empty.json\";\nimport Board from \"./Board\";\n\nconst App = () => {\n  const [leftPuzzle, setLeftPuzzle] = useState(puzzle);\n  const [rightPuzzle, setRightPuzzle] = useState(empty);\n  const puzzleState = {\n    left: {\n      pieces: leftPuzzle,\n      setter: setLeftPuzzle,\n    },\n    right: {\n      pieces: rightPuzzle,\n      setter: setRightPuzzle,\n    },\n  };\n\n  const detectWin = () => {\n    const wintitle = document.querySelector(\".win\");\n    const win = [9, 8, 7, 6, 5, 4, 3, 2, 1];\n    const pieceIds = rightPuzzle.map((piece) => piece.id);\n    console.log(pieceIds);\n    for (let i = 0; i < win.length; i++) {\n      if (win[i] !== pieceIds[i]) {\n        console.log(\"TRY AGAIN\");\n        return;\n      }\n    }\n    return wintitle.classList.remove(\"hidden\");\n  };\n  useEffect(() => detectWin());\n\n  return (\n    <>\n      <div>\n        <h1 className=\"title\">\n          Mini-puzzle <i className=\"fas fa-puzzle-piece\"></i>\n        </h1>\n      </div>\n      <div className=\"win hidden\">\n        Enhorabuena has ganado!!<i className=\"fas fa-trophy\"></i>\n      </div>\n      <div className=\"App\">\n        <Board id=\"puzzle-1\" pieces={leftPuzzle} puzzleState={puzzleState} />\n        <Board id=\"puzzle-2\" pretty={true} pieces={rightPuzzle} puzzleState={puzzleState} />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}